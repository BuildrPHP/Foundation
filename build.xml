<?xml version="1.0" encoding="UTF-8"?>
<project name="BuildR - Foundation" default="default">

    <property name="version" value="0.0.1" />

    <!-- By default, we assume all tools to be on the $PATH -->
    <!-- <property name="toolsdir" value="" /> -->

    <!-- Uncomment if you use composer for build tool downloading -->
    <property name="toolsdir" value="${project.basedir}/vendor/bin/" />

    <!-- Set buildId and VCS type passed by phabricator, harbormaster application -->
    <property name="buildId" value="${harbormaster_build_id}" />
    <property name="vcsType" value="${harbormaster_vcs_type}" />

    <!-- Where tools store output files -->
    <property name="buildOutputPath" value="${project.basedir}/build/output" />

    <!-- Detect OS family to call the proper executable -->
    <condition property="binaryExtension" value=".bat">
        <os family="windows" />
    </condition>

    <condition property="binaryExtension" value="">
        <os family="unix" />
    </condition>

    <!-- Detect run mode (Standalone or Phabricator)-->
    <if>
        <isset property="harbormaster_build_id" />
        <then>
            <property name="runMode" value="BUILD_SYSTEM" />
        </then>

        <else>
            <property name="runMode" value="STANDALONE" />
        </else>
    </if>

    <!-- Start message -->
    <if>
        <equals arg1="${runMode}" arg2="STANDALONE" />

        <then>
            <echo message="Started building ${phing.project.name}!" level="info" />
        </then>

        <else>
            <echo message="Started building ${phing.project.name}! Build ID on phabricator: ${buildId}" level="info" />
        </else>
    </if>

    <!-- Default build target -->
    <target name="default"
            depends="clean,prepare,lint,phpunit,phpcs,phploc,phpcpd"
            description="Default build target that executes simple checks" />

    <!-- Target for travisCI builds -->
    <target name="travis"
            depends="clean,prepare,lint,phpunit,phpcs,phploc,phpcpd"
            description="Main build target for Travis-CI builds" />


    <!-- Target for default build configuration -->
    <target name="build"
            depends="clean,prepare,composer,lint,phpunit,phpcs,phpcpd,phploc,pdepend,documentation,changelog,artifact"
            description="Main build target for internal build-system builds" />

    <!-- Clean all previous build in workspace -->
    <target name="clean"
            unless="clean.done"
            description="Perform output cleanup">

        <delete dir="${buildOutputPath}" />
        <property name="clean.done" value="true" />

    </target>

    <!-- Make all output sub directory for tools -->
    <target name="prepare"
            unless="prepare.done"
            description="Perform to create build output directories">

        <mkdir dir="${buildOutputPath}/logs" />
        <mkdir dir="${buildOutputPath}/changelogs" />
        <mkdir dir="${buildOutputPath}/coverage" />
        <mkdir dir="${buildOutputPath}/pdepend" />
        <mkdir dir="${buildOutputPath}/release" />
        <mkdir dir="${buildOutputPath}/doc" />
        <property name="prepare.done" value="true" />

    </target>

    <!-- Update or install composer dependencies -->
    <target name="composer"
            description="Performing composer installation validation, and dependency installing">

        <!-- Detect that composer is available in PATH environment variable -->
        <property environment="env" />
        <property name="composer.availableGlobally" value="0" />

        <condition property="composer.availableGlobally" value="1">
            <or>
                <available  property="composer.availableGlobally" file="composer" filepath="${env.Path}" />
                <available  property="composer.availableGlobally" file="composer" filepath="${env.PATH}" />
            </or>
        </condition>

        <!-- Determine the base command and download composer when needed -->
        <if>
            <equals arg1="${composer.availableGlobally}" arg2="1" />
            <then>
                <echo message="Found composer installation in your PATH environment variable!" />
                <property name="composer.baseCommand" value="composer${binaryExtension}" />
            </then>

            <else>
                <echo message="Composer is not installed! Downloading..." />
                <exec command="curl -sS https://getcomposer.org/installer | php" />
                <property name="composer.baseCommand" value="php" />
                <property name="composer.baseCommandExt" value="${project.basedir}\composer.phar" />
                <echo message="Composer is installed to: ${composer.baseCommandExt}" />
            </else>
        </if>

        <!--
            Determine is the composer.lock file is exist or not.
            If this exist its mean that dependencies is already installed so only need an update.
        -->
        <property name="composer.subCommand" value="install" />

        <condition property="composer.subCommand" value="update">
            <available property="composer.subCommand" file="${project.basedir}/composer.lock" />
        </condition>

        <echo message="Running the following sub-command: ${composer.subCommand}" level="info" />

        <!-- Actually run composer -->
        <if>
            <equals arg1="${composer.availableGlobally}" arg2="1" />
            <then>
                <exec executable="${composer.baseCommand}">
                    <arg value="${composer.subCommand}" />
                    <arg value="--no-interaction" />
                    <arg value="--optimize-autoloader" />
                    <arg value="--dev" />
                </exec>
            </then>

            <else>
                <exec executable="${composer.baseCommand}">
                    <arg file="${composer.baseCommandExt}" />
                    <arg value="${composer.subCommand}" />
                    <arg value="--no-interaction" />
                    <arg value="--optimize-autoloader" />
                    <arg value="--dev" />
                </exec>
            </else>
        </if>

    </target>

    <!-- Linting PHP syntax using PHP build-in parser -->
    <target name="lint" description="Perform syntax check of sourcecode files">

        <!-- Collect files in 'src' folder and run liner in 4 process -->
        <exec passthru="true" executable="bash" checkreturn="true">
            <arg value="-c" />
            <arg value="find ./src -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l" />
        </exec>

        <!-- Collect files in 'tests' folder and run liner in 4 process -->
        <exec passthru="true" executable="bash" checkreturn="true">
            <arg value="-c" />
            <arg value="find ./tests -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l" />
        </exec>

    </target>

    <!-- Unit testing -->
    <target name="phpunit"
            description="Perform unit test using PHPUnit">

        <!-- Determines PHPUnit run configuration file based in $runMode variable -->
        <if>
            <equals arg1="BUILD_SYSTEM" arg2="${runMode}" />
            <then>
                <property name="phpunit.configFile" value="phpunit-ci.xml" />
            </then>

            <else>
                <property name="phpunit.configFile" value="phpunit.xml" />
            </else>
        </if>

        <exec passthru="true" executable="${toolsdir}phpunit${binaryExtension}" checkreturn="true">
            <arg value="--colors=auto" />
            <arg value="--configuration" />
            <arg path="${project.basedir}/${phpunit.configFile}" />
        </exec>

    </target>

    <!-- Changelog generation target -->
    <target name="changelog"
            description="Perform changelog generation">

        <!-- Generate standard changelog -->
        <exec executable="bash" checkreturn="true" output="${buildOutputPath}/changelogs/general">
            <arg value="-c" />
            <arg value="git log --pretty=format:'* %H: %s%n'" />
        </exec>

        <!-- Generate 'full' changelog, that contains the full commit message -->
        <exec executable="bash" checkreturn="true" output="${buildOutputPath}/changelogs/full">
            <arg value="-c" />
            <arg value="git log --pretty=format:'Commit: %H%nAuthor: %an &#60;%ae&#62;%nDate: %ai%n%n%s%n%b----------------%n'" />
        </exec>

    </target>

    <!-- Duplicated code finding -->
    <target name="phpcpd"
            description="Perform duplicated code checking with PHPCPD">

        <exec passthru="true" executable="${toolsdir}phpcpd${binaryExtension}">
            <arg value="--log-pmd=${buildOutputPath}/logs/pmd-cpd.xml" />
            <arg path="${project.basedir}/src" />
        </exec>

    </target>

    <!-- Coding standard checks -->
    <target name="phpcs"
            description="Perform coding standard verification using PHP-CodeSniffer">

        <!-- Copying the standard definition to PHP-CS -->
        <mkdir dir="${project.basedir}/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/BuildrStandard" />

        <copy todir="${project.basedir}/vendor/squizlabs/php_codesniffer/CodeSniffer/Standards/BuildrStandard">
            <fileset dir="${project.basedir}/build/BuildrStandard" />
        </copy>

        <!-- Execute process -->
        <exec passthru="true" executable="${toolsdir}phpcs${binaryExtension}">
            <arg value="--report=source" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${buildOutputPath}/logs/checkstyle.xml" />
            <arg value="--standard=BuildrStandard" />
            <arg value="-p" />
            <arg path="${project.basedir}/src" />
        </exec>
    </target>

    <!-- Software metrics -->
    <target name="pdepend"
            description="Perform software metrics using PDepend">

        <exec passthru="true" executable="${toolsdir}pdepend${binaryExtension}">
            <arg value="--jdepend-xml=${buildOutputPath}/pdepend/jdepend.xml" />
            <arg value="--jdepend-chart=${buildOutputPath}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${buildOutputPath}/pdepend/overview-pyramid.svg" />
            <arg path="${project.basedir}/src" />
        </exec>

    </target>

    <!-- Project size measurement -->
    <target name="phploc"
            description="Perform project size messaurment using PHPLOC">

        <exec passthru="true" executable="${toolsdir}phploc${binaryExtension}">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${buildOutputPath}/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${buildOutputPath}/logs/phploc.xml" />
            <arg path="${project.basedir}/src" />
            <arg path="${project.basedir}/tests" />
        </exec>

    </target>

    <!-- Documentation generation -->
    <target name="documentation"
            description="Perform documentation generation using APIGen">

        <exec passthru="true" executable="${toolsdir}apigen${binaryExtension}">
            <arg value="generate" />
            <arg value="--source" />
            <arg path="${project.basedir}/src/" />
            <arg value="--destination" />
            <arg path="${buildOutputPath}/doc" />
            <arg value="--deprecated" />
            <arg value="--todo" />
            <arg value="--tree" />
            <arg value="--template-theme=bootstrap" />
        </exec>

    </target>

    <!-- Artifact creation -->
    <target name="artifact"
            description="Perform artifact creation from the current build and documentation">

        <zip destfile="${buildOutputPath}/release/${phing.project.name}-${version}.${harbormaster_vcs_type}-${harbormaster_build_id}.zip"
             basedir="."
             excludes="**/vendor/**,**/build/**,**/cache.properties" />

        <zip destfile="${buildOutputPath}/release/${phing.project.name}-doc-${version}.${harbormaster_vcs_type}-${harbormaster_build_id}.zip"
             basedir="${buildOutputPath}/doc" />

    </target>

</project>
